import os
import requests
from datetime import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
SUPABASE_URL = os.environ.get("SUPABASE_URL") + "/rest/v1/user_activity"
SUPABASE_KEY = os.environ.get("SUPABASE_KEY")
TELEGRAM_BOT_TOKEN = os.environ.get("BOT_TOKEN")

# –£–∫–∞–∂–∏ —Å–≤–æ–π ID –∫–∞–Ω–∞–ª–∞
YOUR_CHANNEL_ID = -1002402728049  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase
HEADERS = {
    "apikey": SUPABASE_KEY,
    "Authorization": f"Bearer {SUPABASE_KEY}",
    "Content-Type": "application/json",
    "Prefer": "return=representation"
}

# ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
def insert_activity(data):
    response = requests.post(SUPABASE_URL, json=data, headers=HEADERS)
    if response.status_code >= 400:
        print("‚ùå Insert Error:", response.status_code, response.text)
    return response.json()

# üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ user_id –∏ post_id
def get_activity(user_id, post_id):
    params = {
        "user_id": f"eq.{user_id}",
        "post_id": f"eq.{post_id}"
    }
    response = requests.get(SUPABASE_URL, headers=HEADERS, params=params)
    if response.status_code >= 400:
        print("‚ùå Get Error:", response.status_code, response.text)
    return response.json()

# üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
def update_activity(user_id, post_id, update_data):
    url = f"{SUPABASE_URL}?user_id=eq.{user_id}&post_id=eq.{post_id}"
    response = requests.patch(url, headers=HEADERS, json=update_data)
    if response.status_code >= 400:
        print("‚ùå Update Error:", response.status_code, response.text)
    return response.json()

# ‚≠ê –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
def update_score(user_id, username, post_id, action_type):
    existing = get_activity(user_id, post_id)
    now = datetime.utcnow().isoformat()  # –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è

    if existing:
        record = existing[0]
        reacted = record.get("reacted", False)
        commented = record.get("commented", False)
        score = record.get("score", 0)
        new_reacted = reacted
        new_commented = commented
        score_delta = 0

        if action_type == "reaction" and not reacted:
            new_reacted = True
            score_delta += 1
        elif action_type == "comment" and not commented:
            new_commented = True
            score_delta += 20

        if score_delta > 0:
            update_activity(user_id, post_id, {
                "reacted": new_reacted,
                "commented": new_commented,
                "score": score + score_delta,
                "date": now
            })
    else:
        score = 1 if action_type == "reaction" else 5
        insert_activity({
            "user_id": user_id,
            "username": username,
            "post_id": post_id,
            "reacted": action_type == "reaction",
            "commented": action_type == "comment",
            "score": score,
            "date": now
        })

# üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (reply –Ω–∞ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞)
async def comment_listener(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user = update.effective_user

    if not message or not message.reply_to_message:
        return

    parent = message.reply_to_message
    post_id = parent.message_id
    user_id = user.id
    username = user.username or user.full_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É –≤ –∫–∞–Ω–∞–ª–µ
    if parent.sender_chat and parent.sender_chat.id == YOUR_CHANNEL_ID:
        update_score(user_id, username, post_id, "comment")
        print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {username} —É—á—Ç—ë–Ω (post_id: {post_id})")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.REPLY, comment_listener))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
