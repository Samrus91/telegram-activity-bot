import os
import requests
from datetime import datetime
from zoneinfo import ZoneInfo
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    filters,
)
from telegram.ext.filters import ChatType

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
SUPABASE_URL    = os.environ["SUPABASE_URL"] + "/rest/v1/user_activity"
SUPABASE_KEY    = os.environ["SUPABASE_KEY"]
BOT_TOKEN       = os.environ["BOT_TOKEN"]
CHANNEL_ID      = -1002402728049
ANOTHER_CHAT_ID = -1002516482222
POLL_IMAGE_URL  = "https://downloader.disk.yandex.ru/preview/f46882adbaf5b8f9163fc0de114dd82ce682b422e519148d329c6bafcf7e7ca8/681241e4/nvlDwn1H-Rprc95XbK3mq6aOyPYARFI-VLCmRy4uY0k3ZNHrdJULX5d7KdaFTAgfTOMuU-TcW2Hz5u5dbR50tg%3D%3D?uid=0&filename=photo_2025-04-30_14-28-54.jpg&disposition=inline&hash=&limit=0&content_type=image%2Fjpeg&owner_uid=0&tknv=v2&size=2048x2048"
ALLOWED_USERNAMES = {"Samrus91", "Lilya_Mukhutdinova", "EvgenijIsaev"}

HEADERS = {
    "apikey": SUPABASE_KEY,
    "Authorization": f"Bearer {SUPABASE_KEY}",
    "Content-Type": "application/json",
    "Prefer": "return=representation",
}

# === Supabase helper functions ===
def insert_activity(data: dict):
    r = requests.post(SUPABASE_URL, json=data, headers=HEADERS)
    if r.status_code >= 400:
        print("‚ùå Insert Error:", r.status_code, r.text)

def get_activity(username: str, post_id: int):
    params = {"username": f"eq.{username}", "post_id": f"eq.{post_id}"}
    r = requests.get(SUPABASE_URL, headers=HEADERS, params=params)
    return r.json() if r.ok else []

def get_total_score(username: str) -> int:
    params = {"username": f"eq.{username}"}
    r = requests.get(SUPABASE_URL, headers=HEADERS, params=params)
    if not r.ok:
        print("‚ùå Score Fetch Error:", r.status_code, r.text)
        return 0
    return sum(item.get("score", 0) for item in r.json())

def update_activity(username: str, post_id: int, data: dict):
    url = f"{SUPABASE_URL}?username=eq.{username}&post_id=eq.{post_id}"
    r = requests.patch(url, headers=HEADERS, json=data)
    if r.status_code >= 400:
        print("‚ùå Update Error:", r.status_code, r.text)

def update_score(user_id: int, username: str, post_id: int, action: str, extra: dict = None):
    now = datetime.now(ZoneInfo("Europe/Moscow")).isoformat()
    score_map = {"comment": 20, "poll": 10, "reaction": 10, "registration": 0}

    if action not in score_map:
        return

    if action == "poll":
        flag = "polled"
    elif action == "registration":
        flag = "registered"
    else:
        flag = f"{action}ed"

    updates = {
        "reacted": False,
        "commented": False,
        "polled": False,
        "registered": False,
        "date": now
    }

    updates[flag] = True

    if extra:
        updates.update(extra)

    existing = get_activity(username, post_id)
    if existing:
        rec = existing[0]
        if rec.get(flag):
            return
        if action != "registration":
            updates["score"] = score_map[action]
        update_activity(username, post_id, updates)
    else:
        updates["score"] = score_map[action] if action != "registration" else 0
        insert_activity({
            "user_id": user_id,
            "username": username,
            "post_id": post_id,
            "reacted": action == "reaction",
            "commented": action == "comment",
            "polled": action == "poll",
            "registered": action == "registration",
            "score": updates["score"],
            "date": now,
            "poll_option": extra.get("poll_option") if extra else None,
            "action_type": action,
        })
# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π ===
async def comment_listener(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    m = update.message
    if not m or not m.reply_to_message:
        return
    parent = m.reply_to_message
    if parent.sender_chat and parent.sender_chat.id == CHANNEL_ID:
        u = update.effective_user
        update_score(
            user_id=u.id,
            username=u.username,
            post_id=parent.message_id,
            action="comment",
            extra={"poll_option": m.text}
        )

async def reaction_auto_add(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    post = update.channel_post
    if not post:
        return

    txt = post.text or post.caption or ""
    
    if "#–ø–æ–ª–µ–∑–Ω–æ–µ" in txt:
        prompt = "–ù–∞—Å–∫–æ–ª—å–∫–æ –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω —ç—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª?"
        btns = [
            [InlineKeyboardButton("üëç –û—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–æ", callback_data=f"react_{post.message_id}_1")],
            [InlineKeyboardButton("üëå –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è", callback_data=f"react_{post.message_id}_2")],
            [InlineKeyboardButton("üëé –ù–µ –ø—Ä–∏–≥–æ–¥–∏–ª–æ—Å—å", callback_data=f"react_{post.message_id}_3")],
        ]
    elif "#–∫–≤–∏–∫–ª–µ—Ä–Ω" in txt:
        prompt = "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
        btns = [[InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"register_{post.message_id}")]]
    else:
        return

    await ctx.bot.send_message(
        chat_id=CHANNEL_ID,
        text=prompt,
        reply_markup=InlineKeyboardMarkup(btns),
        reply_to_message_id=post.message_id
    )

async def callback_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    d = q.data

    if d == "get_exp":
        await q.answer()
        tot = get_total_score(q.from_user.username)
        return await q.message.reply_text(f"‚ú® –£ —Ç–µ–±—è {tot} EXP")

    if d.startswith("react_"):
        _, mid, choice = d.split("_", 2)
        emoji = {"1": "üëç", "2": "üëå", "3": "üëé"}[choice]
        await q.answer("‚ù§Ô∏è –¢–≤–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç! –£—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç!", show_alert=True)
        update_score(
            user_id=q.from_user.id,
            username=q.from_user.username,
            post_id=int(mid),
            action="reaction",
            extra={"poll_option": emoji}
        )

    elif d.startswith("register_"):
        mid = int(d.split("_", 1)[1])
        await q.answer("‚úÖ –¢—ã –∑–∞–ø–∏—Å–∞–ª—Å—è! –°–∫–æ—Ä–æ –º—ã –¥–æ–±–∞–≤–∏–º —Ç–µ–±—è –≤–æ –≤—Å—Ç—Ä–µ—á—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ!", show_alert=True)
        update_score(
            user_id=q.from_user.id,
            username=q.from_user.username,
            post_id=mid,
            action="registration",
            extra={"poll_option": "–ó–∞–ø–∏—Å–∞–ª—Å—è"}
        )
        mention = f"@{q.from_user.username}"
        try:
            origin_msg = await ctx.bot.forward_message(chat_id=q.from_user.id, from_chat_id=CHANNEL_ID, message_id=mid)
            preview = (origin_msg.text or origin_msg.caption or "")[:100].strip()
        except:
            preview = "..."
        link = f"https://t.me/c/{str(CHANNEL_ID)[4:]}/{mid}"
        await ctx.bot.send_message(
            ANOTHER_CHAT_ID,
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä\nüìå –ü–æ—Å—Ç: {preview}\nüîó <a href=\"{link}\">–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç</a>",
            parse_mode="HTML"
        )

async def poll_vote_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer("‚ù§Ô∏è –¢–≤–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç! –£—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç!", show_alert=False)
    _, idx, opt = q.data.split("_", 2)
    update_score(
        user_id=q.from_user.id,
        username=q.from_user.username,
        post_id=q.message.message_id,
        action="poll",
        extra={"poll_option": opt}
    )
# === –ê–¥–º–∏–Ω: –º–µ–Ω—é –∏ –æ–ø—Ä–æ—Å—ã ===

async def admin_menu_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.username not in ALLOWED_USERNAMES:
        return

    kb = [
        [InlineKeyboardButton("üì• –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="create_poll")],
        [InlineKeyboardButton("üí† EXP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_score")],
        [InlineKeyboardButton("‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å EXP", callback_data="admin_addexp")]
    ]

    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(kb))
    elif update.callback_query:
        await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(kb))

async def create_poll_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    ctx.user_data["poll_stage"] = "awaiting_question"
    await update.callback_query.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ–ø—Ä–æ—Å–∞:")

async def admin_text_router(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.username not in ALLOWED_USERNAMES:
        return

    text = update.message.text.strip()
    add_stage = ctx.user_data.get("add_stage")
    poll_stage = ctx.user_data.get("poll_stage")

    print(f"üì• admin_text_router: add_stage={add_stage}, poll_stage={poll_stage}, text={text}")

    # === –†–µ–∂–∏–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ ===
    if add_stage == "awaiting_text":
        try:
            *usernames, score_str = text.split()
            score = int(score_str)
            usernames = [u for u in usernames if not u.startswith("/") and u != "add"]
            now = datetime.now(ZoneInfo("Europe/Moscow")).isoformat()

            for username in usernames:
                insert_activity({
                    "user_id": 999999,
                    "username": username,
                    "post_id": 999999,
                    "reacted": False,
                    "commented": False,
                    "polled": False,
                    "registered": False,
                    "score": score,
                    "date": now,
                    "poll_option": "manual",
                    "action_type": "manual",
                })

            ctx.user_data.pop("add_stage", None)
            kb = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="admin_back")]]
            await update.message.reply_text(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {score} –±–∞–ª–ª–æ–≤ –¥–ª—è: {', '.join(usernames)}", reply_markup=InlineKeyboardMarkup(kb))
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        return

    # === –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ ===
    if poll_stage == "awaiting_question":
        ctx.user_data["poll_question"] = text
        ctx.user_data["poll_stage"] = "awaiting_options"
        return await update.message.reply_text("üìã –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Å—Ç–æ–ª–±–∏–∫ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):")

    elif poll_stage == "awaiting_options":
        options = [opt.strip() for opt in text.split("\n") if opt.strip()]
        if len(options) < 2:
            return await update.message.reply_text("‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞.")
        ctx.user_data["poll_options"] = options
        ctx.user_data["poll_stage"] = "preview"

        preview = f"üìä <b>{ctx.user_data['poll_question']}</b>\n\n" + "\n".join(f"üîò {opt}" for opt in options)
        kb = [
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å", callback_data="send_poll")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_poll")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="admin_back")]
        ]
        return await update.message.reply_text(preview, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(kb))

    return await update.message.reply_text("‚ùå –°–µ–π—á–∞—Å –±–æ—Ç –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞.")
        
async def poll_control_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    if update.callback_query.data == "edit_poll":
        ctx.user_data["poll_stage"] = "awaiting_question"
        await update.callback_query.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:")
    elif update.callback_query.data == "send_poll":
        q = ctx.user_data.get("poll_question")
        opts = ctx.user_data.get("poll_options")
        if not q or not opts:
            return await update.callback_query.message.reply_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        kb = [[InlineKeyboardButton(f"{i+1}. {o}", callback_data=f"poll_{i}_{o}")] for i, o in enumerate(opts)]
        await ctx.bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=POLL_IMAGE_URL,
            caption=f"üìä<b>{q}</b>\n\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(kb)
        )
        ctx.user_data.clear()
        await update.callback_query.message.reply_text("‚úÖ –û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.")
# === –ê–¥–º–∏–Ω: EXP –∏ —Ä—É—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ ===

async def admin_score_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    r = requests.get(SUPABASE_URL, headers=HEADERS)
    data = r.json() if r.ok else []

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    totals = {}
    for rec in data:
        u = rec.get("username")
        totals[u] = totals.get(u, 0) + rec.get("score", 0)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
    lines = [f"@{u} ‚Äî {s} EXP" for u, s in sorted(totals.items(), key=lambda x: -x[1])]

    kb = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="admin_back")]]

    # === –†–∞–∑–±–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º (–ª–∏–º–∏—Ç Telegram ‚Äî 4096 —Å–∏–º–≤–æ–ª–æ–≤) ===
    chunk = ""
    for line in lines:
        if len(chunk) + len(line) + 1 > 4000:  # –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
            await update.callback_query.message.reply_text(chunk.strip())
            chunk = ""
        chunk += line + "\n"

    if chunk:
        await update.callback_query.message.reply_text(chunk.strip(), reply_markup=InlineKeyboardMarkup(kb))

async def admin_add_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    ctx.user_data["add_stage"] = "awaiting_text"
    fmt = "–ü—Ä–∏–º–µ—Ä:\nSamrus91 Lilya_Mukhutdinova 25"
    await update.callback_query.message.reply_text(f"–ü—Ä–∏—à–ª–∏—Ç–µ –ª–æ–≥–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤.\n{fmt}")

async def admin_back_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await admin_menu_handler(update, ctx)
# === –°—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω ===
async def start_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    kb = [[InlineKeyboardButton("üìä –ú–æ–∏ EXP", callback_data="get_exp")]]
    await update.message.reply_text("‚ö°Ô∏è –ü—Ä–∏–≤–µ—Ç, —è Expik! –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π EXP, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—Éüëá", reply_markup=InlineKeyboardMarkup(kb))


# === Main ===
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(CommandHandler("menu", admin_menu_handler))

    # Callback'–∏
    app.add_handler(CallbackQueryHandler(create_poll_start, pattern="^create_poll$"))
    app.add_handler(CallbackQueryHandler(poll_control_handler, pattern="^(send_poll|edit_poll)$"))
    app.add_handler(CallbackQueryHandler(admin_score_handler, pattern="^admin_score$"))
    app.add_handler(CallbackQueryHandler(admin_add_start, pattern="^admin_addexp$"))
    app.add_handler(CallbackQueryHandler(admin_back_handler, pattern="^admin_back$"))
    app.add_handler(CallbackQueryHandler(callback_handler, pattern=r"^(get_exp|react_|register_)"))
    app.add_handler(CallbackQueryHandler(poll_vote_handler, pattern=r"^poll_"))

    # –°–æ–æ–±—â–µ–Ω–∏—è
    app.add_handler(MessageHandler(filters.TEXT & ChatType.PRIVATE, admin_text_router))
    app.add_handler(MessageHandler(filters.REPLY & ChatType.GROUPS, comment_listener))
    app.add_handler(MessageHandler(filters.ALL & filters.UpdateType.CHANNEL_POST, reaction_auto_add))

    print("üöÄ Bot started")
    app.run_polling()


if __name__ == "__main__":
    main()
